Web Security cont
(missed the monday (8A) lecture, was sick & @ IUHC)


DNS server look at overlapping ip addr to see if they belong to same party

=====

Cross-site scripting

setup: user input is echoed into HTML response
  - attacker replaces search term with script, then google builds webpage with information about term
  then the script will be generated by google and will be served to you on the page that says "we couldnt find anything about this"
   -- could be your cookie that attacker will use

not only can do cookie stealing but can forge user entry/phising attack
 -- shows up as google, in their domain, so you are tricked


3 types of XSS attack
 - reflection 
   give you url with paramterized terms and javascrpit inside these terms
   when you click on url, request is ent to target website, 
    request bounces back to your browser with the scripts inside the target (google) domain
    and the scripts run in this domain, with privilege to touch any resource (esp. if you are logged in)

 - persistent
    attacker already submitted/posted something and on this post is script
    whoever visits this 
    "persistent" because JS is already saved on the website and whoever visits will get infected

  - dom-based (local) 
     attack liives within page's client-side script
     

Defending against XSS
 - depend on input sanitzation on server-side
 - XSS is mostly server-side problem
 - major part is to filter out code 
 - code should be built up by server not client, don't run client code
 - special characters that could indicate javascript get encoded into different form
    e.g. " becomes &quot
    "htmlspecialchars" is the method to convert
    then browser cannot execute the script because the special characters have been encoded

 more adhoc approaches
   - based on cookies
      -- protect cookie from javascript 
      -- prevents cookie theft via XSS

==

Cross-Site Request Forgery
  - XSS you need to visit attack server and lcick url provided by 
  - if youre logged in to your bank account and in another tab visit an attack server, a request could be sent on your behalf
  - 


confused deputy problem
- when using browser to visit website... browser is your deputy (act on your behalf)
  website assuems whatever comes thru vrowser is your command
  but another tab in your browser is runing attack server/scripts then their request seems like it is yours


Login Cross-Site Request Forgery
- when you open a browser
    this time you visit malicious attack website
  the website attacker, on server-side, log you into attacker account 
  then whatever you do on google, will be logged in the attacker account
  so they can build up a profile on you and what youre doing 
  since google writes custom data for you based on your activity to your account
  so your activity gets logged to the attacker's account

==

CSRF Defense
- fundamental problem: you send request and bank cannot differentiate if it is yours or the javascripts running in your browser
   wnat to allow bank to differentiate this
   simple way: use secret token (on bank's webpage) 

 - can check html header and see who initiated scripts -- user or attacker's webpage [referer field of html]
    -- many organizations remove the referer field (for privacy reasons)


    same origin policy -- only allowed to touch content from same domain as you 
    if you have token on bank's page in one tab and have attacker's tab open in another, 
    they canot access the bank token because the domains are different (same origin policy is good)
